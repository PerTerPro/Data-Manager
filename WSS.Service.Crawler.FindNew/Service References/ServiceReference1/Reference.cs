//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WSS.Service.Crawler.Consumer.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WSS.Service.CrawlerProduct.Control")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceControl")]
    public interface IServiceControl {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetData", ReplyAction="http://tempuri.org/IServiceControl/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetData", ReplyAction="http://tempuri.org/IServiceControl/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServiceControl/GetDataUsingDataContractResponse")]
        WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType GetDataUsingDataContract(WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServiceControl/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetCompanyCrawlerReload", ReplyAction="http://tempuri.org/IServiceControl/GetCompanyCrawlerReloadResponse")]
        QT.Moduls.CrawlerProduct.JobCrawler GetCompanyCrawlerReload();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetCompanyCrawlerReload", ReplyAction="http://tempuri.org/IServiceControl/GetCompanyCrawlerReloadResponse")]
        System.Threading.Tasks.Task<QT.Moduls.CrawlerProduct.JobCrawler> GetCompanyCrawlerReloadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetCompanyCrawlerFindNew", ReplyAction="http://tempuri.org/IServiceControl/GetCompanyCrawlerFindNewResponse")]
        QT.Moduls.CrawlerProduct.JobCrawler GetCompanyCrawlerFindNew();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/GetCompanyCrawlerFindNew", ReplyAction="http://tempuri.org/IServiceControl/GetCompanyCrawlerFindNewResponse")]
        System.Threading.Tasks.Task<QT.Moduls.CrawlerProduct.JobCrawler> GetCompanyCrawlerFindNewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/UpdateCrawlerReloadStopImediate", ReplyAction="http://tempuri.org/IServiceControl/UpdateCrawlerReloadStopImediateResponse")]
        void UpdateCrawlerReloadStopImediate(long CompanyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/UpdateCrawlerReloadStopImediate", ReplyAction="http://tempuri.org/IServiceControl/UpdateCrawlerReloadStopImediateResponse")]
        System.Threading.Tasks.Task UpdateCrawlerReloadStopImediateAsync(long CompanyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/CoutListWait", ReplyAction="http://tempuri.org/IServiceControl/CoutListWaitResponse")]
        int CoutListWait();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/CoutListWait", ReplyAction="http://tempuri.org/IServiceControl/CoutListWaitResponse")]
        System.Threading.Tasks.Task<int> CoutListWaitAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/UpdateCrawlerReloadEnd", ReplyAction="http://tempuri.org/IServiceControl/UpdateCrawlerReloadEndResponse")]
        void UpdateCrawlerReloadEnd(long Company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/UpdateCrawlerReloadEnd", ReplyAction="http://tempuri.org/IServiceControl/UpdateCrawlerReloadEndResponse")]
        System.Threading.Tasks.Task UpdateCrawlerReloadEndAsync(long Company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/SaveWaiting", ReplyAction="http://tempuri.org/IServiceControl/SaveWaitingResponse")]
        bool SaveWaiting();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceControl/SaveWaiting", ReplyAction="http://tempuri.org/IServiceControl/SaveWaitingResponse")]
        System.Threading.Tasks.Task<bool> SaveWaitingAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceControlChannel : WSS.Service.Crawler.Consumer.ServiceReference1.IServiceControl, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceControlClient : System.ServiceModel.ClientBase<WSS.Service.Crawler.Consumer.ServiceReference1.IServiceControl>, WSS.Service.Crawler.Consumer.ServiceReference1.IServiceControl {
        
        public ServiceControlClient() {
        }
        
        public ServiceControlClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceControlClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceControlClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceControlClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType GetDataUsingDataContract(WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(WSS.Service.Crawler.Consumer.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public QT.Moduls.CrawlerProduct.JobCrawler GetCompanyCrawlerReload() {
            return base.Channel.GetCompanyCrawlerReload();
        }
        
        public System.Threading.Tasks.Task<QT.Moduls.CrawlerProduct.JobCrawler> GetCompanyCrawlerReloadAsync() {
            return base.Channel.GetCompanyCrawlerReloadAsync();
        }
        
        public QT.Moduls.CrawlerProduct.JobCrawler GetCompanyCrawlerFindNew() {
            return base.Channel.GetCompanyCrawlerFindNew();
        }
        
        public System.Threading.Tasks.Task<QT.Moduls.CrawlerProduct.JobCrawler> GetCompanyCrawlerFindNewAsync() {
            return base.Channel.GetCompanyCrawlerFindNewAsync();
        }
        
        public void UpdateCrawlerReloadStopImediate(long CompanyID) {
            base.Channel.UpdateCrawlerReloadStopImediate(CompanyID);
        }
        
        public System.Threading.Tasks.Task UpdateCrawlerReloadStopImediateAsync(long CompanyID) {
            return base.Channel.UpdateCrawlerReloadStopImediateAsync(CompanyID);
        }
        
        public int CoutListWait() {
            return base.Channel.CoutListWait();
        }
        
        public System.Threading.Tasks.Task<int> CoutListWaitAsync() {
            return base.Channel.CoutListWaitAsync();
        }
        
        public void UpdateCrawlerReloadEnd(long Company) {
            base.Channel.UpdateCrawlerReloadEnd(Company);
        }
        
        public System.Threading.Tasks.Task UpdateCrawlerReloadEndAsync(long Company) {
            return base.Channel.UpdateCrawlerReloadEndAsync(Company);
        }
        
        public bool SaveWaiting() {
            return base.Channel.SaveWaiting();
        }
        
        public System.Threading.Tasks.Task<bool> SaveWaitingAsync() {
            return base.Channel.SaveWaitingAsync();
        }
    }
}
